extends layout

block content
	.right-align
			a(href="/") Kelsey Breseman
	.main-container
		h1 Learn to code

		i There are a lot of sites out there intended to teach coding.
			| However, it's often hard to move from one step to the next, or know when that is a good idea.
			| This lesson path is intended to guide you efficiently through the many excellent resources available.
			p If you follow this path to its so-far completion, you probably won't need me to tell you where to look for the next step.
			p (Suggested times at each heading approximately match how long each step took me.)

		h2 Code familiarity <i>(2 hours)</i>

		p We're going to start with JavaScript, because it's fairly easy to learn, and because you should be able to make and interact with something really quickly.

		p Head over to <a href="http://www.codecademy.com/" target=0>Codecademy</a> and try some of their introductory JavaScript lessons.

		p Spend about two hours here, or until you're reasonably comfortable with the syntax, then move on to the next step.

		p You can always learn more syntax as you go. (Google will be your guide through Stack Overflow, MDN, and other excellent code-related resources.)

		h2 Node basics <i>(2 days)</i>

		p Node is all about making small pieces of code that do one thing really well.
		| What that means for you is that with Node, you can use other people's Node packages
		| to make your code do more things quickly. Think of it like buying pre-fabricated subassemblies for a robot.
		| Only it's free– thanks, open source community!

		p
			i (You need to know how to use the command line to do this step. If you've never done that, go here first: <a href="/learntocode/cmd101mac" target=0>Mac</a> | <a href="/learntocode/cmd101win" target=0>Windows</a>)
		p
			i (You also need Node installed. <a href="https://github.com/joyent/node/wiki/Installation" target=0>Installation instructions.</a>)

		p Node has a little online school. <a href="http://nodeschool.io/#learn-you-node" target=0>Go there</a> and do the lesson called Learnyounode.

		p Learnyounode will take you from a “Hello World” to parsing information from multiple websites asynchronously.
		
		p This should give you, in ~2 days of effort, a pretty good idea of what is available within Node and how quickly you can make things.

		h2 Learn some web programming tools <i>(21 days)</i>

		p Work through the first three or four lessons and homeworks of <a href="https://github.com/olinjs" target=0>Olin.JS</a>.
		| You'll become familiar with Heroku, Jade, JQuery, AJAX, and more.
		p You might run into some frustration; not all of the lessons contain all of the information you will need to complete the assignments.
		p Use this as your entrance point into the open source community: if something is wrong or missing, learn how to submit an issue or a pull request on Github, where the lessons are hosted.
		p If you can't figure something out, try asking a question on Stack Overflow (be sure to Google it first and define your question, though. People can be a bit snarky on Stack Overflow).

		h2 Make stuff <i>(21 days)</i>

		p Time to make some projects. You could design your own (e.g. make yourself a cool website or project portfolio) or work through some more homeworks from <a href="https://github.com/olinjs">Olin.JS</a>.

		p Designing and making your own webapps and pages will make you think "ooh, it would be cool if..." and then you can google around to find out how to implement your idea.
			| Continue making stuff until you feel comfortable figuring out how to implement both client-side and server-side code for dynamic webpages.

		h2 Learn some theory <i>(21 days)</i>

		p Okay, now that you're fairly comfortable making things with code, it's time to learn some of the theory behind programming. Here's a suggested reading list:
			ul
				li 
					a(href=href="http://www.angelfire.com/art2/ebooks/teachyourselfcplusplusin21days.pdf" target=0)
						| Learn C++ in 21 days: 
					p The objective here is not to learn C++, but to accomplish two other objectives:
					ol
						li This book does a really excellent job explaining computer science concepts simply and accessibly, including some useful insight into how computers store information, and 
						li You will likely recognize that it is really easy to learn C++ syntax because you have seen many of the same structures in JavaScript.
		p This step should help you understand why some code can be "better", even if both get the job done.
			| It may also show you how different programming languages can be suited to different sorts of tasks.
		p When you work through the example programs, instead of copying/pasting, summarize the code in comments in your text editor, then try to fill in the code without peeking back at the example.